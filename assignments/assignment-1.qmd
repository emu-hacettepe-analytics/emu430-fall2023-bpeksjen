---
title: "Assignment 1"
---

# Let me cook now
# 1)

Python and R has some differences you know.

R has a unique syntax with a focus on data manipulation and analysis. It uses a vectors for operations on data frames and matrices.    
```{r}
my_vector <- c(1, 2, 3, 4, 5)
mean_value <- mean(my_vector)
print(mean_value)
```

Python has a more general-purpose syntax with a clear, easy-to-read structure. It relies on libraries like NumPy and Pandas for data manipulation.

```{python}
import numpy as np
my_list = [1, 2, 3, 4, 5]
mean_value = np.mean(my_list)
print(mean_value)
```

R offers unique data structures like data frames, which are well-suited for statistical analysis. It also uses factors for categorical data.

```{r}
data_frame <- data.frame(
  Name = c("Alice", "Bob", "Charlie"),
  Age = c(25, 30, 22)
)
```

 Python relies on a more extensive set of built-in data structures like lists, dictionaries, and tuples. Libraries like Pandas provide data frames.

```{python}
import pandas as pd
data_frame = pd.DataFrame({
  'Name': ["Alice", "Bob", "Charlie"],
  'Age': [25, 30, 22]
})
```

 In R, list comprehensions are not a built-in feature of the language. Instead, R typically uses lapply() or sapply() functions to perform operations on lists.

```{r}
numbers <- c(1, 2, 3, 4, 5)
squared_values <- lapply(numbers, function(x) x^2)
print(squared_values)
```

Python supports list comprehensions, which allow you to create lists using a concise and expressive syntax.

```{python}
numbers = [1, 2, 3, 4, 5]
squared_values = [x**2 for x in numbers]
print(squared_values)
```

# 2)
I will make all the NAs disappear now. Watch closely.
```{r}

library(dslabs)

data("na_example")

cat("Original Dataset (na_example) as a Data Frame:\n")
print(as.data.frame(na_example))

na_example_no_na <- na_example
na_example_no_na[is.na(na_example_no_na)] <- 0

cat("\nUpdated Dataset (na_example_no_na, NAs replaced with 0) as a Data Frame:\n")
print(as.data.frame(na_example_no_na))


```

# 3)
Creating basic text-based games in R is a fun way to learn the basics of game development. Here's a summary of how to make a very simple text-based game in R:

1. Define the Game Concept:
Start by defining the concept of your text-based game. For a basic game, you might create a simple "Guess the Number" game where the player has to guess a random number.

2. Generate a Random Number:
Use R's sample() function to generate a random number. This number will be the one that the player needs to guess.

3. Implement Game Logic:
Write code that handles the game's logic. Create a loop that allows the player to enter guesses, compare their guesses to the random number, and provide feedback (e.g., "Too high" or "Too low"). Continue the loop until the player guesses the correct number.

4. User Input and Output:
Use R's readline() function to get input from the player, and print() or cat() to display messages and feedback. You can also create a simple text-based interface to make the game more interactive.

5. Win/Lose Conditions:
Define win and lose conditions. In the "Guess the Number" game, the player wins if they guess the correct number and loses after a certain number of attempts.